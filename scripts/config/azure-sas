#!/usr/bin/env python

import argparse
import re
import sys
from datetime import datetime, timedelta
from typing import Optional
from urllib.parse import quote_plus, unquote


def generate_container_sas_token(
    account_name: str,
    account_key: str,
    container_name: str,
    expiry: datetime,
    with_write_permission: bool = False,
):
    """
    Generate a sas token for the given container
    """
    try:
        # try using azure-storage-blob >= 12:
        from azure.storage.blob import generate_container_sas, ContainerSasPermissions

        token = generate_container_sas(
            account_name=account_name,
            container_name=container_name,
            account_key=account_key,
            expiry=expiry,
            permission=ContainerSasPermissions(
                read=True, write=True, delete=True, list=True
            )
            if with_write_permission
            else ContainerSasPermissions(read=True, list=True),
        )
    except ImportError:
        # fall back to azure-storage-blob < 12
        from azure.storage.blob import BlockBlobService, ContainerPermissions

        service = BlockBlobService(account_name=account_name, account_key=account_key)
        permissions = ContainerPermissions.LIST + ContainerPermissions.READ
        if with_write_permission:
            permissions += ContainerPermissions.WRITE + ContainerPermissions.DELETE
        token = service.generate_container_shared_access_signature(
            container_name=container_name, permission=permissions, expiry=expiry
        )

    return token


def hazure2sas(hazure_url: str) -> Optional[str]:
    match = re.search(
        ("hazure://(?P<account_name>[^:]+):(?P<sas>[^@]+)@(?P<container>[^?]+)?"),
        hazure_url,
    )

    if match is None:
        print("Cannot parse hazure url")
        return None
    else:
        account_name = match.group("account_name")
        container = match.group("container")
        sas = unquote(match.group("sas"))
        return f"https://{account_name}.blob.core.windows.net/{container}?{sas}"


class AzureSasCli(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
            description="Either convert a hazure url to a azure sas token"
            " or create new azure sas token from credentials.",
            usage="""azure-sas <command> [<args>]

The possible commands are:
   convert     Convert hazure url to azure sas token.
   create      Create new azure sas token from credentials.
""",
        )
        parser.add_argument("command", help="Subcommand to run.")
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail.
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print("Unrecognized command.")
            parser.print_help()
            exit(1)
        # Use dispatch pattern to invoke method with same name.
        getattr(self, args.command)()

    def convert(self):
        parser = argparse.ArgumentParser(
            description="Convert hazure url to azure sas token."
        )
        # Prefixing the argument with -- means it's optional.
        parser.add_argument("hazure", type=str, help="Hazure url string.")
        args = parser.parse_args(sys.argv[2:])

        print(hazure2sas(args.hazure))

    def create(self):
        parser = argparse.ArgumentParser(
            description="Create new azure sas token from credentials."
        )
        parser.add_argument("--account", type=str, help="Azure storage account name.")
        parser.add_argument("--key", type=str, help="Azure storage account key.")
        parser.add_argument(
            "--container",
            type=str,
            help="Azure storage container name.",
        )
        parser.add_argument(
            "--lease",
            type=int,
            default=90,
            help="Lease time in days.",
        )
        parser.add_argument(
            "--write",
            action="store_true",
            help="Include write privilege.",
        )
        args = parser.parse_args(sys.argv[2:])

        expiry = datetime.utcnow() + timedelta(days=args.lease)
        token = generate_container_sas_token(
            account_name=args.account,
            account_key=args.key,
            container_name=args.container,
            expiry=expiry,
            with_write_permission=args.write,
        )
        hazure_url = f"hazure://{args.account}:{quote_plus(token)}@{args.container}?use_sas=true&create_if_missing=false"
        print(f"Quoted: {hazure_url}")
        print(f"Unquoted: {hazure2sas(hazure_url)}")


def main():
    AzureSasCli()


if __name__ == "__main__":
    main()
